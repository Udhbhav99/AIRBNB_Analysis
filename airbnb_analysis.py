# -*- coding: utf-8 -*-
"""AIRBNB_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ceOu0sdNbA-7uudci1GhjrAsWAWzoFi
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

pip install pymongo

from pymongo import MongoClient

"""#DATA EXTRACTION"""

conn='mongodb+srv://Vaddadi_12:Bonsai12@cluster0.bbsj0ua.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0'
client=MongoClient(conn)

db=client['sample_airbnb']
col=db['listingsAndReviews']

all_data=[]
for i in col.find():
  data= dict(id=i['_id'],
             listing_url=i['listing_url'],
             summary=i['summary'],
             description=i['description'],
             space=i['space'],
             rules=i['house_rules'],
             property_type=i['property_type'],
             Room_type = i['room_type'],
             Bed_type = i['bed_type'],
             Min_nights = int(i['minimum_nights']),
             Max_nights = int(i['maximum_nights']),
             Cancellation_policy = i['cancellation_policy'],
             Accomodates = i['accommodates'],
             Total_bedrooms = i.get('bedrooms'),
             Total_beds = i.get('beds'),
             Availability_365 = i['availability']['availability_365'],
             Price = i['price'],
             Security_deposit = i.get('security_deposit'),
             Cleaning_fee = i.get('cleaning_fee'),
             Extra_people = i['extra_people'],
             Guests_included= i['guests_included'],
             No_of_reviews = i['number_of_reviews'],
             Review_scores = i['review_scores'].get('review_scores_rating'),
             Amenities = ', '.join(i['amenities']),
             Host_id = i['host']['host_id'],
             Host_name = i['host']['host_name'],
             Street = i['address']['street'],
             Country = i['address']['country'],
             Country_code = i['address']['country_code'],
             Location_type = i['address']['location']['type'],
             Longitude = i['address']['location']['coordinates'][0],
             Latitude = i['address']['location']['coordinates'][1],
             Is_location_exact = i['address']['location']['is_location_exact']
             )
  all_data.append(data)

df=pd.DataFrame(all_data)

"""## Data cleaning and Preprocessing"""

df.head(3)

df.dtypes

# changing data types

df.isna().sum()

df.Price = df.Price.astype(str).astype(float)
df.Security_deposit = df.Security_deposit[~df.Security_deposit.isna()].astype(str).astype(float)
df.Cleaning_fee = df.Cleaning_fee[~df.Cleaning_fee.isna()].astype(str).astype(float)
df.Extra_people = df.Extra_people.astype(str).astype(float)
df.Guests_included = df.Guests_included.astype(str).astype(float)

df.Review_scores = df.Review_scores.astype('Int64')



df.isna().sum()

#missing values



#total bedrooms to be filled with mode
df.Total_bedrooms.fillna(df.Total_bedrooms.mode()[0], inplace=True)
#total beds filled with median
df.Total_beds.fillna(df.Total_beds.median(), inplace=True)
df.Security_deposit.fillna(df.Security_deposit.median(),inplace=True)
df.Cleaning_fee.fillna(df.Cleaning_fee.median(),inplace=True)
df.Review_scores.fillna(df.Review_scores.median(),inplace=True)

df.isna().sum()

#checking for duplicates
df.duplicated().value_counts()

# No duplicates

df.head(2)



"""#EDA"""

#percentage of property types
df.property_type.value_counts(normalize=True).mul(100)

# top properties
plt.figure(figsize=(8,4))
pt_ax=sns.countplot(df, y="property_type",order=df.property_type.value_counts().index[:10])
pt_ax.set_title("Top 10 property types")

#Avg price as per property
plt.figure(figsize=(8,4))
avg_price_p_type=df.Price.groupby(df.property_type.values).mean()[:10]
plt.barh(avg_price_p_type.index,avg_price_p_type.values)
plt.xlabel("Property Type")
plt.ylabel("Avg Price")
plt.title('Mean Price by Property')
plt.show()

plt.figure(figsize=(8,4))
pt_ax=sns.countplot(df, y="Room_type")
pt_ax.set_title("Top room types")

df.to_excel("airbnb.xlsx")

